Alphabet:
a. Upper (A-Z) and lower case letters (a-z) of the English alphabet

b. Decimal digits (0-9);

Lexic:

      a.Special symbols, representing:

        - operators = + - * / % & | !

        - logical operators && ||

        - relation < > <= == >= !=

        - separators [ ] { }  : ; space

        - reserved words: list bool char const do else float false  if int of program scan string then true var while print

      b.identifiers

        - a sequence of letters and  digits, such that the first characters are letter, and we have digits only after all the letters; the rule is:

            identifier = letter | letter{letter}{digit}

            letter = "A" | "B" | . ..| "Z" |  "a" | "b" | . ..| "z" 

            zero = "0"

            nonzero = "1" |...| "9"

            digit = zero | nonzero

      c.constants

1.integer - rule:

      noconst = ["+"| "-"]nonzero{digit} | zero

2.string

      string="""{character}"""

      character= letter | digit
3.bool

      bool = "True" | "False"

token.in
=
+ 
- 
* 
/ 
// 
% 
< 
> 
<= 
==
!= 
>=
&&
&
||
|
[
] 
{ 
}  
: 
; 
space
bool 
char 
const 
do 
else 
false 
float 
if 
int
list 
of 
program 
scan 
string 
then 
true 
var 
while 
print
declare


Syntax.txt

 2. Syntax:


program =  "$" cmpdstmt "$"

declarationstmt = "DECLARE" type (IDENTIFIER | array){","(IDENTIFIER | array)}

type = "BOOL" | "INT" | "STRING"

array = "LIST" IDENTIFIER"[" noconst "]"

cmpdstmt = "{" stmtlist "}"

stmtlist = stmt{";"} | stmt ";" stmtlist

stmt = simplstmt | structstmt

simplstmt = assignstmt | iostmt | declarationstmt

address = IDENTIFIER | address"[" expression "]"

assignstmt = address "=" expression

expression = expression ("+" | "-" | "|" | "||") term | term

term = term ("*" | "%" | "/" | "&" | "&&" ) factor | factor

factor = "(" expression ")" | address | condition | constant

constant = noconst | string | bool

iostmt = ("SCAN" | "PRINT") address{","address}

structstmt = cmpdstmt | ifstmt | whilestmt

ifstmt = "IF" expression "THEN" cmpdstmt ["ELSE" cmpdstmt]

whilestmt = "WHILE" expression "DO" cmpdstmt

condition = expression RELATION expression | "!"(condition)

RELATION = "<" | "<=" | "==" | "<>" | ">=" | ">"

