Alphabet:
a. Upper (A-Z) and lower case letters (a-z) of the English alphabet

       b. Underline character '_';

       c. Decimal digits (0-9);

Lexic:

      a.Special symbols, representing:

        - operators = + - * / // % & |

        - logiacl operaotrs && ||

        - relation < > <= == >= !=

        - separators [ ] { }  : ; space

        - reserved words: list bool char const do else float false  if int of program scan string then true var while print

      b.identifiers

        - a sequence of letters and  digits, such that the first character is a letter; the rule is:

            identifier = letter | letter{letter}{digit}

            letter = "A" | "B" | . ..| "Z" |  "a" | "b" | . ..| "z" 

            zero = "0"

            nonzero = "1" |...| "9"

            digit = zero | nonzero

      c.constants

1.integer - rule:

      noconst = "+"nonzero{no} | "-"nonzero{no} | nonzero{no}

      no = nonzero{no} | zero

2.character

    character:='letter' | 'digit' | ''

3.string

      constchar="string"

      string=char{string}

      char=letter|digit| ""


token.in
=
+ 
- 
* 
/ 
// 
% 
< 
> 
<= 
==
!= 
>=
&&
&
||
|
[
] 
{ 
}  
: 
; 
space
bool 
char 
const 
do 
else 
false 
float 
if 
int
list 
of 
program 
scan 
string 
then 
true 
var 
while 
print


Syntax.txt

 2. Syntax:


program =  "$" cmpdstmt "$"

declarationstmt = "DECLARE" type (IDENTIFIER | arraydecl){","(IDENTIFIER | array)}

type = "BOOL" | "CHAR" | "INT" | "FLOAT" | "STRING"

array = "LIST" IDENTIFIER"[" number "] 

cmpdstmt = "{" stmtlist "}"

stmtlist = stmt | stmt ";" stmtlist

stmt = simplstmt | structstmt

simplstmt = assignstmt | iostmt | declarationstmt

assignstmt = IDENTIFIER "=" expression

expression = expression operator term | term

term = term operator factor | factor

factor = "(" expression ")" | IDENTIFIER

iostmt = ("SCAN" | "PRINT") IDENTIFIER{","IDENTIFIER}

structstmt = cmpdstmt | ifstmt | whilestmt

ifstmt = "IF" condition "THEN" stmt ["ELSE" stmt]

whilestmt = "WHILE" condition "DO" stmt

condition = expression RELATION expression |conditon logicalop condition

RELATION = "<" | "<=" | "==" | "<>" | ">=" | ">"

logicalop = "&&" | "||"

